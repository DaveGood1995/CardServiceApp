package com.dgood.paymenthandler

import android.content.Context
import androidx.test.core.app.ApplicationProvider
import com.dgood.paymenthandler.model.request.RequestCustomerAccount
import com.dgood.paymenthandler.model.request.Device
import com.dgood.paymenthandler.model.request.RequestOrder
import com.dgood.paymenthandler.model.response.OrderBreakdown
import com.dgood.paymenthandler.model.response.ResponseCustomerAccount
import com.dgood.paymenthandler.model.response.ResponseOrder
import com.dgood.paymenthandler.model.response.StoredPaymentCredentials
import com.dgood.paymenthandler.model.response.TransactionResult
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Test

class PaymentHandlerTest {

    private lateinit var paymentHandler: PaymentHandler

    @Before
    fun setup() {
        val context: Context = ApplicationProvider.getApplicationContext()
        paymentHandler = PaymentHandler(context)
    }

    @Test
    fun testInsertCardTransaction() {
        val amount = 50.0
        val order = "QM1UKY"
        val currency = "EUR"
        val expectedMessage = "Card Inserted: Amount - EUR 50.00, Order - QM1UKY"

        val result = paymentHandler.insertCardTransaction(amount, order, currency)

        assertEquals(expectedMessage, result)
    }

    @Test
    fun testMakePayment(){
        val channel = "POS"
        val terminal = "5140001"
        val requestOrder = RequestOrder("SDHLGB", "USD", 5.0)
        val device = Device("PAX_A920_PRO", "f8765432110000000082")
//        val account = RequestCustomerAccount(device
        val account = RequestCustomerAccount(device
        val orderBreakdown = OrderBreakdown(5.00)
        val orderResult = ResponseOrder("QM1UKB", "USD", 5.00, orderBreakdown, )
        val accountResult = ResponseCustomerAccount("MasterCard", "Not Available", "541333******4111","1225","CONTACTLESS ICC")
//        val expectedResult = TransactionResult("EQZB2G8K1V", "136007", orderResult, "")
        val cred = StoredPaymentCredentials("", "", "", "", "", "")
        val expectedResult = TransactionResult("", "", "", "", "", 5.0, "", "", cred )


        val result = paymentHandler.makePayment(channel, terminal, requestOrder, account)
        assertEquals(expectedResult, result)

    }
}